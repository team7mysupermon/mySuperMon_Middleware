package storage

import (
	"reflect"
)

type RunAutoGenerated struct {
	Status       string      `json:"status"`
	ResponseCode int         `json:"responseCode"`
	RunMetaData  RunMetaData `json:"data"`
	ErrorMessage interface{} `json:"errorMessage"`
	ErrorCode    interface{} `json:"errorCode"`
	ReportLink   interface{} `json:"reportLink"`
}
type RunData struct {
	SumRowsAffected        int         `json:"SUM_ROWS_AFFECTED"`
	SumSelectRange         int         `json:"SUM_SELECT_RANGE"`
	SumLockTime            float64     `json:"SUM_LOCK_TIME"`
	SumSortRows            int         `json:"SUM_SORT_ROWS"`
	SumErrors              int         `json:"SUM_ERRORS"`
	SumRowsSent            interface{} `json:"SUM_ROWS_SENT"`
	SumSelectScan          int         `json:"SUM_SELECT_SCAN"`
	SumNoGoodIndexUsed     int         `json:"SUM_NO_GOOD_INDEX_USED"`
	ExecTimeMax            interface{} `json:"EXEC_TIME_MAX"`
	SumSortScan            int         `json:"SUM_SORT_SCAN"`
	SumSelectRangeCheck    int         `json:"SUM_SELECT_RANGE_CHECK"`
	SumTimerWait           float64     `json:"SUM_TIMER_WAIT"`
	UsecaseIdentifier      string      `json:"USECASE_IDENTIFIER"`
	Starttimestmap         string      `json:"STARTTIMESTMAP"`
	SumRowsExamined        interface{} `json:"SUM_ROWS_EXAMINED"`
	SumSelectFullJoin      int         `json:"SUM_SELECT_FULL_JOIN"`
	SumNoIndexUsed         int         `json:"SUM_NO_INDEX_USED"`
	CountStar              int         `json:"COUNT_STAR"`
	SumSelectFullRangeJoin int         `json:"SUM_SELECT_FULL_RANGE_JOIN"`
	SumSortMergePasses     int         `json:"SUM_SORT_MERGE_PASSES"`
	SumSortRange           int         `json:"SUM_SORT_RANGE"`
}

type RunSituationResult struct {
	DataSourceID int         `json:"dataSourceId"`
	DatabaseType string      `json:"databaseType"`
	DatabaseName string      `json:"databaseName"`
	SchemaName   interface{} `json:"schemaName"`
	HostURL      string      `json:"hostUrl"`
	RunData      RunData     `json:"data"`
}

type RunMetaData struct {
	IDNum                 int                  `json:"idNum"`
	UsecaseIdentifier     string               `json:"usecaseIdentifier"`
	ApplicationID         int                  `json:"applicationId"`
	ApplicationName       string               `json:"applicationName"`
	ApplicationIdentifier string               `json:"applicationIdentifier"`
	RunSituationResult    []RunSituationResult `json:"runSituationResult"`
}

func (s RunAutoGenerated) runAutoGeneratedIsEmpty() bool {
	emptyRunAutoGenerated := RunAutoGenerated{
		Status:       "",
		ResponseCode: 0,
		RunMetaData:  RunMetaData{},
		ErrorMessage: nil,
		ErrorCode:    nil,
		ReportLink:   nil,
	}

	if reflect.DeepEqual(s, emptyRunAutoGenerated) {
		return true
	} else {
		return false
	}

}
