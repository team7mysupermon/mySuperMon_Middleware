package storage_test

import (
	"encoding/json"
	"fmt"
	"log"
	"testing"

	"github.com/go-playground/assert/v2"
	"github.com/team7mysupermon/mySuperMon_Middleware/storage"
)

var (
	START_TEST = []byte(`{
		"status":"SUCCESS",
		"responseCode":200,
		"data":{
		   "idNum":1729,
		   "usecaseIdentifier":"MIDDELWAREAPITEST",
		   "applicationId":203,
		   "applicationName":"Konakart_Application",
		   "applicationIdentifier":"d9cdf882-6f1e-45d3-b8ca-2d1b19d9712e",
		   "dataSourceList":[
			  {
				 "dataSourceId":232,
				 "databaseType":"MySQL",
				 "databaseName":"konakart",
				 "schemaName":"konakart",
				 "hostUrl":"34.88.216.230",
				 "data":{
					"STATEMENTS":31.0,
					"STATEMENT_LATENCY_IN_S":0.02,
					"FILE_IO_LATENCY_IN_S":0.0,
					"CURRENT_CONNECTIONS":0.0,
					"DATABASE_SIZE_IN_MB":4.6,
					"STATEMENT_AVG_LATENCY_IN_MS":0.53,
					"APPLICATION_ID":203.0,
					"FILE_IOS":12.0,
					"TABLE_SCANS":7.0,
					"DATA_SOURCE_ID":232.0,
					"USECASE_IDENTIFIER":0.0,
					"UNIQUE_USERS":1.0
				 },
				 "valueObjectList":null
			  }
		   ]
		},
		"errorMessage":null,
		"errorCode":null,
		"reportLink":null
	 }`)
)

func setUpStartData() storage.StartAutoGenerated{
	var startAutoGenerated storage.StartAutoGenerated

	err := json.Unmarshal(RUN_TEST, &startAutoGenerated)
		if err != nil {
			log.Panicln(err)
		}

		fmt.Printf("%+v\n", startAutoGenerated)

	return startAutoGenerated
}

func TestStartAutoGenerated(t *testing.T) {
	data := setUpStartData()

	assert.Equal(t, data.Status, "200 OK")
	assert.Equal(t, data.ResponseCode, 200)
	assert.Equal(t, data.ErrorMessage, nil)
	assert.Equal(t, data.ErrorCode, nil)
	assert.Equal(t, data.ReportLink, nil)
}

func TestStartMetaData(t *testing.T) {
	data := setUpStartData().StartMetaData

	assert.Equal(t, data.IDNum, 1682)
	assert.Equal(t, data.UsecaseIdentifier, "MIDDELWAREAPITEST")
	assert.Equal(t, data.ApplicationID, 203)
	assert.Equal(t, data.ApplicationName, "Konakart_Application")
	assert.Equal(t, data.ApplicationIdentifier, "d9cdf882-6f1e-45d3-b8ca-2d1b19d9712e")
}

func TestStartSituationResult(t *testing.T) {
	data := setUpStartData().StartMetaData.DataSourceList[0]

	assert.Equal(t, data.DataSourceID, 232)
	assert.Equal(t, data.DatabaseType, "MySQL")
	assert.Equal(t, data.DatabaseName, "konakart")
	assert.Equal(t, data.SchemaName, "")
	assert.Equal(t, data.HostURL, "34.88.216.230")
}

/* func TestStartData(t *testing.T){
	data := setUpStartData().StartMetaData.StartDataSourceList[0].StartData

	assert.Equal(t, data.SumRowsAffected, 0)
	assert.Equal(t, data.SumSelectRange, 0)
	assert.Equal(t, data.SumLockTime, 217000000.0000)
	assert.Equal(t, data.SumSortRows, 0)
	assert.Equal(t, data.SumErrors, 0)
	assert.Equal(t, data.SumRowsSent, nil)
	assert.Equal(t, data.SumSelectScan, 1)
	assert.Equal(t, data.SumNoGoodIndexUsed, 0)
	assert.Equal(t, data.ExecTimeMax, nil)
	assert.Equal(t, data.SumSortScan, 0)
	assert.Equal(t, data.SumSelectRangeCheck, 0)
	assert.Equal(t, data.SumTimerWait, 769276000.0000)
	assert.Equal(t, data.UsecaseIdentifier, "MIDDELWAREAPITEST")
	assert.Equal(t, data.Starttimestmap, "2022-05-09T12:38:40.000+0000")
	assert.Equal(t, data.SumRowsExamined, nil)
	assert.Equal(t, data.SumSelectFullJoin, 0)
	assert.Equal(t, data.SumNoIndexUsed, 1)
	assert.Equal(t, data.CountStar, 1)
	assert.Equal(t, data.SumSelectFullRangeJoin, 0)
	assert.Equal(t, data.SumSortMergePasses, 0)
	assert.Equal(t, data.SumSortRange, 0)
} */