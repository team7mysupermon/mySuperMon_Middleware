package monitoring

import (
	"time"

	"github.com/prometheus/client_golang/prometheus"
)

var (
	STOP_STATEMENTS_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "STATEMENTS",
			Help: "",
		})

	STOP_STATEMENT_LATENCY_IN_S_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "STATEMENT_LATENCY_IN_S",
			Help: "",
		})

	STOP_FILE_IO_LATENCY_IN_S_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "FILE_IO_LATENCY_IN_S",
			Help: "",
		})

	STOP_CURRENT_CONNECTIONS_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "CURRENT_CONNECTIONS",
			Help: "",
		})

	STOP_DATABASE_SIZE_IN_MB_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "DATABASE_SIZE_IN_MB",
			Help: "",
		})

	STOP_STATEMENT_AVG_LATENCY_IN_MS_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "STATEMENT_AVG_LATENCY_IN_MS",
			Help: "",
		})
	
	STOP_APPLICATION_ID_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "APPLICATION_ID",
			Help: "",
		})

	STOP_FILE_IOS_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "FILE_IOS",
			Help: "",
		})
	
	STOP_TABLE_SCANS_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "TABLE_SCANS",
			Help: "",
		})

	STOP_DATA_SOURCE_ID_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "DATA_SOURCE_ID",
			Help: "",
		})

	STOP_USECASE_IDENTIFIER_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "USECASE_IDENTIFIER",
			Help: "",
		})
	
	STOP_UNIQUE_USERS_GAUGE = prometheus.NewGauge(
		prometheus.GaugeOpts{
			Name: "UNIQUE_USERS",
			Help: "",
		})
)

// registers metrics to expose
func stopRegisterMetrics() {
	prometheus.MustRegister(STOP_STATEMENTS_GAUGE)
	prometheus.MustRegister(STOP_STATEMENT_LATENCY_IN_S_GAUGE)
	prometheus.MustRegister(STOP_FILE_IO_LATENCY_IN_S_GAUGE)
	prometheus.MustRegister(STOP_CURRENT_CONNECTIONS_GAUGE)
	prometheus.MustRegister(STOP_DATABASE_SIZE_IN_MB_GAUGE)
	prometheus.MustRegister(STOP_STATEMENT_AVG_LATENCY_IN_MS_GAUGE)
	prometheus.MustRegister(STOP_APPLICATION_ID_GAUGE)
	prometheus.MustRegister(STOP_FILE_IOS_GAUGE)
	prometheus.MustRegister(STOP_TABLE_SCANS_GAUGE)
	prometheus.MustRegister(STOP_DATA_SOURCE_ID_GAUGE)
	prometheus.MustRegister(STOP_USECASE_IDENTIFIER_GAUGE)
	prometheus.MustRegister(STOP_UNIQUE_USERS_GAUGE)
}

func stopRecordMetrics() {

	go func() {
		for {
			stopData := stopAutoGenerated.StopMetaData.StopDataSourceList[0].StopData
			
			STOP_STATEMENTS_GAUGE.Set(stopData.Statements)
			STOP_STATEMENT_LATENCY_IN_S_GAUGE.Set(stopData.StatementLatencyInS)
			STOP_FILE_IO_LATENCY_IN_S_GAUGE.Set(stopData.FileIoLatencyInS)
			STOP_CURRENT_CONNECTIONS_GAUGE.Set(stopData.CurrentConnections)
			STOP_DATABASE_SIZE_IN_MB_GAUGE.Set(stopData.DatabaseSizeInMb)
			STOP_STATEMENT_AVG_LATENCY_IN_MS_GAUGE.Set(stopData.StatementAvgLatencyInMs)
			STOP_APPLICATION_ID_GAUGE.Set(stopData.ApplicationID)
			STOP_FILE_IOS_GAUGE.Set(stopData.FileIos)
			STOP_TABLE_SCANS_GAUGE.Set(stopData.TableScans)
			STOP_DATA_SOURCE_ID_GAUGE.Set(stopData.DataSourceID)
			STOP_USECASE_IDENTIFIER_GAUGE.Set(stopData.UsecaseIdentifier)
			STOP_UNIQUE_USERS_GAUGE.Set(stopData.UniqueUsers)

			time.Sleep(5 * time.Second)
		}
	}()

}